/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package troyrenaudgr12pat;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * This class manages users in a UI. It displays and allows changes to user
 * data.
 */
public class AdminUserManagementUI extends javax.swing.JFrame {

    private ArrayList<User> users = new ArrayList();
    private int selected;
    private User adminUser;
    private Customer currentCustomer;

    /**
     * Creates a new Admin User Management UI.
     *
     * @param adminUser The admin user who is logged in.
     * @param c The current customer.
     */
    public AdminUserManagementUI(User adminUser, Customer c) {
        initComponents();
        DataHandler dh = new DataHandler();
        this.addTable();
        users = dh.getAllUsers();
        this.adminUser = adminUser;
        currentCustomer = c;
    }

    /**
     * Refreshes the user table to show updated user data.
     */
    private void refreshTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblUsers.getModel();
        dtm.setRowCount(0); // Clear existing rows
        for (int i = 0; i < users.size(); i++) {
            Object[] userRow = new Object[]{
                users.get(i).getUserID(),
                users.get(i).getUsername(),
                users.get(i).getPassword(),
                users.get(i).getRole()
            };
            dtm.addRow(userRow);
        }
        //this code repopulated the previous data with updated data, by setting the old rows to the newly updated rows
    }

    /**
     * Updates text fields with the selected user's data. Displays the username,
     * password, and role of the selected user.
     */
    private void tblProductsValueChanged() {
        selected = tblUsers.getSelectedRow();
        if (selected != -1) {
            usernameTF.setText(users.get(selected).getUsername());
            passwordTF.setText("" + users.get(selected).getPassword());
            roleTF.setText("" + users.get(selected).getRole());
        }
        // This updates text fields so that selected user info can be edited.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameTF = new javax.swing.JTextField();
        passwordTF = new javax.swing.JTextField();
        AddNewUserBtn = new javax.swing.JButton();
        modifyUsername = new javax.swing.JLabel();
        modifyPassword = new javax.swing.JLabel();
        modifyRole = new javax.swing.JLabel();
        deleteButton2 = new javax.swing.JButton();
        editButton2 = new javax.swing.JButton();
        roleTF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        aumHelpBtn = new javax.swing.JButton();
        anuImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1315, 835));
        setResizable(false);
        getContentPane().setLayout(null);

        usernameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(usernameTF);
        usernameTF.setBounds(1000, 320, 170, 30);

        passwordTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(passwordTF);
        passwordTF.setBounds(1000, 370, 170, 30);

        AddNewUserBtn.setBackground(new java.awt.Color(102, 204, 255));
        AddNewUserBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        AddNewUserBtn.setText("Add User");
        AddNewUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewUserBtnActionPerformed(evt);
            }
        });
        getContentPane().add(AddNewUserBtn);
        AddNewUserBtn.setBounds(1000, 730, 130, 50);

        modifyUsername.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        modifyUsername.setForeground(java.awt.Color.white);
        modifyUsername.setText("Username:");
        getContentPane().add(modifyUsername);
        modifyUsername.setBounds(880, 330, 80, 17);

        modifyPassword.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        modifyPassword.setForeground(java.awt.Color.white);
        modifyPassword.setText("Password:");
        getContentPane().add(modifyPassword);
        modifyPassword.setBounds(880, 380, 72, 17);

        modifyRole.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        modifyRole.setForeground(java.awt.Color.white);
        modifyRole.setText("Role:");
        getContentPane().add(modifyRole);
        modifyRole.setBounds(910, 430, 35, 17);

        deleteButton2.setBackground(new java.awt.Color(255, 153, 0));
        deleteButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteButton2.setText("Delete");
        deleteButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton2);
        deleteButton2.setBounds(840, 730, 140, 50);

        editButton2.setBackground(new java.awt.Color(102, 255, 102));
        editButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        editButton2.setText("Edit");
        editButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(editButton2);
        editButton2.setBounds(1150, 730, 130, 50);

        roleTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(roleTF);
        roleTF.setBounds(1000, 420, 170, 30);

        tblUsers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "Username", "Password", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUsersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblUsers);
        if (tblUsers.getColumnModel().getColumnCount() > 0) {
            tblUsers.getColumnModel().getColumn(0).setResizable(false);
            tblUsers.getColumnModel().getColumn(1).setResizable(false);
            tblUsers.getColumnModel().getColumn(2).setResizable(false);
            tblUsers.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(90, 190, 740, 410);

        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(20, 20, 70, 30);

        aumHelpBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        aumHelpBtn.setText("Help");
        aumHelpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumHelpBtnActionPerformed(evt);
            }
        });
        getContentPane().add(aumHelpBtn);
        aumHelpBtn.setBounds(1220, 20, 60, 30);

        anuImage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        anuImage.setForeground(java.awt.Color.white);
        anuImage.setIcon(new javax.swing.ImageIcon("C:\\Users\\troyr\\Dropbox\\School Work\\IT\\TroyRenaudGr12PAT\\Troy_Gr_12_PAT_Images\\milad-fakurian-bexwsdM5BCw-unsplash.jpg")); // NOI18N
        getContentPane().add(anuImage);
        anuImage.setBounds(-1140, -160, 2700, 960);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Opens the AdminNewUserUI and closes the current window when the "Add
     * User" button is clicked.
     *
     * @param evt the event triggered by the button click
     */
    private void AddNewUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewUserBtnActionPerformed
        AdminNewUserUI anu = new AdminNewUserUI(adminUser, currentCustomer);
        anu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_AddNewUserBtnActionPerformed

    /**
     * Deletes the selected user after confirmation. Refreshes the table and
     * clears the text fields.
     *
     * @param evt the event triggered by the button click
     */
    private void deleteButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButton2ActionPerformed
        if (selected != -1) {
            // Ask for confirmation before deleting the product
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this product?", "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                DataHandler dh = new DataHandler();

                // Delete the selected product from the ArrayList
                User userToDelete = users.get(selected);
                dh.deleteUser(userToDelete);
                users.remove(selected);

                // Delete the selected product from the table's data model
                DefaultTableModel dtm = (DefaultTableModel) tblUsers.getModel();
                dtm.removeRow(selected);

                // Clear the text fields
                usernameTF.setText("");
                passwordTF.setText("");
                roleTF.setText("");

                selected = -1; // Reset the selected index
            }
        } else {
            JOptionPane.showMessageDialog(null, "No user selected for deletion.");
        }
    }//GEN-LAST:event_deleteButton2ActionPerformed

    /**
     * Edits and updates the user info in the table. It first checks if all
     * fields are filled and if the role is valid.
     *
     * @param evt the event triggered by the button click
     */
    private void editButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButton2ActionPerformed
        int userID = users.get(selected).getUserID();
        String username = usernameTF.getText().trim();
        String password = passwordTF.getText().trim();
        String role = roleTF.getText().trim();
        // This code extracts information entered or selected by the user and assigns it to different variables (and trims spaces)

        checksForEdit(); // Perform validation checks first

        // If checksForEdit shows an error, it will return early and not execute the following code
        if (username.isEmpty() || password.isEmpty() || role.isEmpty()) {
            return;
        }

        DataHandler dh = new DataHandler();

        try {
            dh.updateUser(new User(userID, username, password, role));

            //this code sets/updates the older values so that they are updated immediately after clicking the edit button
            DefaultTableModel dtm = (DefaultTableModel) tblUsers.getModel();
            dtm.setValueAt(username, selected, 1);
            dtm.setValueAt(password, selected, 2);
            dtm.setValueAt(role, selected, 3);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid price or quantity format. Please enter valid numbers.");
        }
        //Reference: https://stackoverflow.com/questions/3179136/jtable-how-to-refresh-table-model-after-insert-delete-or-update-the-data (helped with refreshing table data)
    }//GEN-LAST:event_editButton2ActionPerformed

    /**
     * Validates user data before editing. Ensures no fields are empty and the
     * role is either 'Admin' or 'User'.
     */
    private void checksForEdit() {
        String username = usernameTF.getText().trim();
        String password = passwordTF.getText().trim();
        String role = roleTF.getText().trim();

        // Check if any field is empty
        if (username.isEmpty() || password.isEmpty() || role.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields must be filled.");
            return;
        }

        // Validate role (roles: Admin, User)
        if (!(role.equalsIgnoreCase("Admin") || role.equalsIgnoreCase("User"))) {
            JOptionPane.showMessageDialog(null, "Invalid role. Please enter 'Admin' or 'User'.");
            return;
        }
    }

    /**
     * Handles the event when a row in the table is clicked. Updates the text
     * fields to show the selected user's info.
     *
     * @param evt the event triggered by the mouse click
     */
    private void tblUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUsersMouseClicked
        selected = tblUsers.getSelectedRow();
        this.tblProductsValueChanged();
        //runs the code: when a row is clicked by the mouse, it will show up in text fields to then edit
    }//GEN-LAST:event_tblUsersMouseClicked

    /**
     * Navigates back to the Admin Dashboard UI when the "Back" button is
     * clicked.
     *
     * @param evt the event triggered by the button click
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        AdminDashboardUI adb = new AdminDashboardUI(adminUser, currentCustomer);
        adb.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * Displays a help message dialog to guide users on how to use the Admin
     * User Management interface.
     *
     * @param evt action event triggered by clicking the help button
     */
    private void aumHelpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumHelpBtnActionPerformed
        String helpMessage = "1. This interface allows admin users to manage user accounts.\n\n"
                + "2. The table displays the following information:\n"
                + "   - UserID: The unique identifier for each user.\n"
                + "   - Username: The username for the user.\n"
                + "   - Password: The password for the user.\n"
                + "   - Role: The role of the user (Admin/User).\n\n"
                + "3. Adding a New User:\n"
                + "   - Click the 'Add User' button to open a new window for adding user details.\n\n"
                + "4. Editing a User:\n"
                + "   - Select a user from the table, and their details will be displayed in the text fields.\n"
                + "   - Modify the information and click the 'Edit' button to save changes.\n\n"
                + "5. Deleting a User:\n"
                + "   - Select a user and click the 'Delete' button. Confirm the action to remove the user.\n\n"
                + "6. Navigation:\n"
                + "   - Use the 'Back' button to return to the previous screen.";

        JOptionPane.showMessageDialog(null, helpMessage, "Admin User Management Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aumHelpBtnActionPerformed

    /**
     * Adds all users to the table when the UI is loaded. Initializes the table
     * with user data.
     */
    public void addTable() {
        DataHandler dh = new DataHandler();
        users = dh.getAllUsers();
        DefaultTableModel dtm = (DefaultTableModel) tblUsers.getModel();
        Object userRow[] = new Object[4];
        for (int i = 0; i < users.size(); i++) {
            userRow[0] = "" + users.get(i).getUserID();
            userRow[1] = "" + users.get(i).getUsername();
            userRow[2] = "" + users.get(i).getPassword();
            userRow[3] = "" + users.get(i).getRole();
            dtm.addRow(userRow);
        }
        tblUsers.setSelectionMode(0);  // Set the selection to the first user.
        selected = tblUsers.getSelectedRow();  // Update the selected index.
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminUserManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminUserManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminUserManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminUserManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AdminUserManagementUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewUserBtn;
    private javax.swing.JLabel anuImage;
    private javax.swing.JButton aumHelpBtn;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton deleteButton2;
    private javax.swing.JButton editButton2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel modifyPassword;
    private javax.swing.JLabel modifyRole;
    private javax.swing.JLabel modifyUsername;
    private javax.swing.JTextField passwordTF;
    private javax.swing.JTextField roleTF;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField usernameTF;
    // End of variables declaration//GEN-END:variables
}
