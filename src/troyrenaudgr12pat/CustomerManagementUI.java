/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package troyrenaudgr12pat;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author troyr
 */
public class CustomerManagementUI extends javax.swing.JFrame {
    
    private ArrayList<Customer> customers = new ArrayList(); //declare and make space in RAM for products
    private int selected; //Initialise 'selected'
    private User adminUser;
    private Customer currentCustomer;

    /**
     * Creates new form CustomerManagementUI
     */
    public CustomerManagementUI(User adminUser, Customer c) {
        initComponents();
        DataHandler dh = new DataHandler();  // Initialise and create an instance of the DataHandler class.
        this.addTable();
        customers = dh.getAllCustomers();
        this.adminUser = adminUser;
        currentCustomer = c;
    }
    
    private void refreshTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblCustomers.getModel();
        dtm.setRowCount(0);
        for (int i = 0; i < customers.size(); i++) {
            Object[] customerRow = new Object[]{
                customers.get(i).getCustomerID(),
                customers.get(i).getCustomerFirstname(),
                customers.get(i).getCustomerSurname(),
                customers.get(i).getCustomerCellphoneNumber(),
                customers.get(i).getCustomerEmail()
            };
            dtm.addRow(customerRow);
        }
    }

    private void addTable() {
        DataHandler dh = new DataHandler();
        customers = dh.getAllCustomers();
        DefaultTableModel dtm = (DefaultTableModel) tblCustomers.getModel();
        tblCustomers.setModel(dtm);
        Object customerRow[] = new Object[5];
        for (int i = 0; i < customers.size(); i++) {
            customerRow[0] = customers.get(i).getCustomerID();
            customerRow[1] = customers.get(i).getCustomerFirstname();
            customerRow[2] = customers.get(i).getCustomerSurname();
            customerRow[3] = customers.get(i).getCustomerCellphoneNumber();
            customerRow[4] = customers.get(i).getCustomerEmail();
            dtm.addRow(customerRow);
        }
        tblCustomers.setSelectionMode(0);  // Set the selection to the first customer.
        selected = tblCustomers.getSelectedRow();  // Update the selected index.
    }
    
    private void tblCustomersValueChanged() {
    selected = tblCustomers.getSelectedRow();
    if (selected != -1) {
        nameTF.setText(customers.get(selected).getCustomerFirstname());
        surnameTF.setText(customers.get(selected).getCustomerSurname());
        cellphoneNumberTF.setText(customers.get(selected).getCustomerCellphoneNumber());
        emailTF.setText(customers.get(selected).getCustomerEmail());
    }
    // This method updates the text fields with the information of the selected customer
}
    
    private void checksForEdit() {
    String firstname = nameTF.getText().trim();
    String surname = surnameTF.getText().trim();
    String cellphoneNumber = cellphoneNumberTF.getText().trim();
    String email = emailTF.getText().trim();

    // Check if any field is empty
    if (firstname.isEmpty() || surname.isEmpty() || cellphoneNumber.isEmpty() || email.isEmpty()) {
        JOptionPane.showMessageDialog(null, "All fields must be filled.");
        return;
    }

    // Validate email format
    if (!isValidEmail(email)) {
        JOptionPane.showMessageDialog(null, "Invalid email format. Please enter a valid email address.");
        return;
    }
    
    // Validate email format
    if (!isValidCellphoneNumber(cellphoneNumber)) {
        JOptionPane.showMessageDialog(null, "Invalid cellphone number format. Please enter a valid cellphone number.");
        return;
    }
}
    
    // Utility methods for validation
    private boolean isValidCellphoneNumber(String cellphoneNumber) {
        return cellphoneNumber.matches("\\d{10}");
        // Example pattern for a 10-digit number, adjust the pattern based on your requirements
    }

    private boolean isValidEmail(String email) {
        return email.matches("^[A-Za-z0-9+_.-]+@(.+)$");
        // Simple email pattern validation, you can enhance it based on your needs
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cellphoneNumberTF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        nameTF = new javax.swing.JTextField();
        surnameTF = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        AddCustomerBtn = new javax.swing.JButton();
        nameLbl = new javax.swing.JLabel();
        surnameLbl = new javax.swing.JLabel();
        helpBtn = new javax.swing.JButton();
        numberLbl = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        emailLbl = new javax.swing.JLabel();
        emailTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CustomerID", "Name", "Surname", "Cellphone Number", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCustomers);
        if (tblCustomers.getColumnModel().getColumnCount() > 0) {
            tblCustomers.getColumnModel().getColumn(0).setResizable(false);
            tblCustomers.getColumnModel().getColumn(1).setResizable(false);
            tblCustomers.getColumnModel().getColumn(2).setResizable(false);
            tblCustomers.getColumnModel().getColumn(3).setResizable(false);
            tblCustomers.getColumnModel().getColumn(4).setResizable(false);
        }

        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(204, 204, 255));
        backBtn.setText("‚Üê");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        AddCustomerBtn.setText("Add Customer");
        AddCustomerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCustomerBtnActionPerformed(evt);
            }
        });

        nameLbl.setText("Name:");

        surnameLbl.setText("Surname:");

        helpBtn.setBackground(new java.awt.Color(255, 153, 153));
        helpBtn.setText("Help");
        helpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBtnActionPerformed(evt);
            }
        });

        numberLbl.setText("Cellphone Number:");

        deleteBtn.setBackground(new java.awt.Color(153, 153, 255));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(51, 153, 0));
        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        emailLbl.setText("Email:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(AddCustomerBtn)
                        .addGap(53, 53, 53)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(surnameLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(numberLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(emailLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cellphoneNumberTF, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(nameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(surnameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(emailTF))))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(helpBtn)
                    .addComponent(backBtn))
                .addGap(236, 236, 236)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLbl)
                            .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(surnameLbl)
                            .addComponent(surnameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numberLbl)
                            .addComponent(cellphoneNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailLbl)
                            .addComponent(emailTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 289, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBtn)
                    .addComponent(deleteBtn)
                    .addComponent(AddCustomerBtn)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomersMouseClicked
        selected = tblCustomers.getSelectedRow();
        this.tblCustomersValueChanged();
        //runs the code: when a row is clicked by the mouse, it will show up in text fields to then edit
    }//GEN-LAST:event_tblCustomersMouseClicked

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // Handle the action when the "Title" text field is modified.
    }//GEN-LAST:event_nameTFActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        AdminDashboardUI adb = new AdminDashboardUI(adminUser, currentCustomer);
        adb.setVisible(true);
        this.dispose();
        // Handle the action when the "Back" button is clicked.
        // It opens the LandingPageUI and closes the current window.
    }//GEN-LAST:event_backBtnActionPerformed

    private void AddCustomerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCustomerBtnActionPerformed
        AdminNewCustomerUI anc = new AdminNewCustomerUI(adminUser, currentCustomer);
        anc.setVisible(true);
        this.dispose();
        // Handle the action when the "Add New Product" button is clicked.
        // It opens the AddNewProductUI and closes the current window.
    }//GEN-LAST:event_AddCustomerBtnActionPerformed

    private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        JOptionPane.showMessageDialog(null, "- Edit the values in the blocks or select a customer you want to remove" + "\n" + "- Then click Edit / Delete to change or delete a customer");
        //creates a message box that helps the user with what the page does
    }//GEN-LAST:event_helpBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if (selected != -1) {
            // Ask for confirmation before deleting the product
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this customer?", "Confirm Deletion",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                DataHandler dh = new DataHandler();

                // Delete the selected product from the ArrayList
                Customer customerToDelete = customers.get(selected);
                dh.deleteCustomer(customerToDelete);
                customers.remove(selected);

                // Delete the selected product from the table's data model
                DefaultTableModel dtm = (DefaultTableModel) tblCustomers.getModel();
                dtm.removeRow(selected);

                // Clear the text fields
                nameTF.setText("");
                surnameTF.setText("");
                cellphoneNumberTF.setText("");
                emailTF.setText("");

                selected = -1; // Reset the selected index
            }
        } else {
            JOptionPane.showMessageDialog(null, "No customer selected for deletion.");
        }
        // Handle the action when the "Delete" button is clicked.
        // It deletes the selected customer from the database and refreshes the UI.
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        int customerID = customers.get(selected).getCustomerID();
        String name = nameTF.getText().trim();
        String surname = surnameTF.getText().trim();
        String number = cellphoneNumberTF.getText().trim();
        String email = emailTF.getText().trim();
        // This code extracts information entered or selected by the user and assigns it to different variables

        checksForEdit(); // Perform validation checks first

        // If checksForEdit shows an error, it will return early and not execute the following code
        if (name.isEmpty() || surname.isEmpty() || number.isEmpty() || email.isEmpty()) {
            return;
        }

        DataHandler dh = new DataHandler();

        try {
            dh.updateCustomer(new Customer(customerID, name, surname, number, email));
            DefaultTableModel dtm = (DefaultTableModel) tblCustomers.getModel();
            dtm.setValueAt(name, selected, 1);
            dtm.setValueAt(surname, selected, 2);
            dtm.setValueAt(number, selected, 3);
            dtm.setValueAt(email, selected, 4);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid price or quantity format. Please enter valid numbers.");
        }
        //this code sets/updates the older values so that they are updated immediately after clicking the edit button
        //makes sure price is is the right format otherwise displays message dialog
        //Reference: https://stackoverflow.com/questions/3179136/jtable-how-to-refresh-table-model-after-insert-delete-or-update-the-data (helped with refreshing table data)
    }//GEN-LAST:event_editBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new CustomerManagementUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCustomerBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField cellphoneNumberTF;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel emailLbl;
    private javax.swing.JTextField emailTF;
    private javax.swing.JButton helpBtn;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTF;
    private javax.swing.JLabel numberLbl;
    private javax.swing.JLabel surnameLbl;
    private javax.swing.JTextField surnameTF;
    private javax.swing.JTable tblCustomers;
    // End of variables declaration//GEN-END:variables
}
