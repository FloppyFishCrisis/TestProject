/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package troyrenaudgr12pat;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * This class manages products in a UI. It displays and allows changes to
 * product data.
 */
public class AdminProductManagementUI extends javax.swing.JFrame {

    private ArrayList<Product> products = new ArrayList();
    private int selected;
    private User adminUser;
    private Customer currentCustomer;

    /**
     * Constructor for AdminProductManagementUI. This sets up the UI for
     * managing products, initializes components, and populates the product
     * table.
     *
     * @param adminUser the current admin user
     * @param c the current customer
     */
    public AdminProductManagementUI(User adminUser, Customer c) {
        initComponents();
        DataHandler dh = new DataHandler();
        this.addTable();
        products = dh.getAllProducts();
        this.adminUser = adminUser;
        currentCustomer = c;
        populateCategoryComboBox();
    }

    /**
     * Refreshes the product table to display updated product information.
     * Clears the table and repopulates it with data from the products list.
     */
    private void refreshTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblProducts.getModel();
        dtm.setRowCount(0);
        for (int i = 0; i < products.size(); i++) {
            Object[] productRow = new Object[]{
                products.get(i).getProductID(),
                products.get(i).getProductName(),
                products.get(i).getCategory(),
                products.get(i).getBarcode(),
                products.get(i).getPrice()
            };
            dtm.addRow(productRow);
        }
        //this code repopulated the previous data with updated data, by setting the old rows to the newly updated rows
    }

    /**
     * Populates the fields with data from the selected row in the product
     * table. Fills text fields and combo boxes with the data of the selected
     * product.
     */
    private void tblProductsValueChanged() {
        selected = tblProducts.getSelectedRow();
        if (selected != -1) {
            productNameTF.setText(products.get(selected).getProductName());
            categoryComboBox.setSelectedItem(products.get(selected).getCategory());
            barcodeTF.setText("" + products.get(selected).getBarcode());
            priceTF.setText("" + products.get(selected).getPrice());
        }
    }

    /**
     * Populates the category combo box with predefined product categories.
     */
    private void populateCategoryComboBox() {
        String[] categories = {"Buns & Rolls", "Burgers", "Pizzas", "Toasted Sandwiches", "Snacks", "Other"};

        // Add categories to comboBox
        for (int i = 0; i < categories.length; i++) {
            categoryComboBox.addItem(categories[i]);  // Add each category to the combo box
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        expiryDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        AddNewProductBtn = new javax.swing.JButton();
        priceTF = new javax.swing.JTextField();
        modifyBarcode = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        modifyPrice = new javax.swing.JLabel();
        productNameTF = new javax.swing.JTextField();
        modifyProductName = new javax.swing.JLabel();
        modifyCategory = new javax.swing.JLabel();
        deleteButton2 = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        editButton2 = new javax.swing.JButton();
        barcodeTF = new javax.swing.JTextField();
        categoryComboBox = new javax.swing.JComboBox<>();
        apmHelpBtn = new javax.swing.JButton();
        apmImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1315, 835));
        setResizable(false);
        getContentPane().setLayout(null);

        AddNewProductBtn.setText("Add Product");
        AddNewProductBtn.setBackground(new java.awt.Color(102, 204, 255));
        AddNewProductBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        AddNewProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewProductBtnActionPerformed(evt);
            }
        });
        getContentPane().add(AddNewProductBtn);
        AddNewProductBtn.setBounds(990, 730, 150, 50);

        priceTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(priceTF);
        priceTF.setBounds(1030, 480, 170, 40);

        modifyBarcode.setText("Barcode:");
        modifyBarcode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        modifyBarcode.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(modifyBarcode);
        modifyBarcode.setBounds(940, 420, 62, 17);

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductID", "ProductName", "Category", "Barcode", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProducts.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblProducts);
        if (tblProducts.getColumnModel().getColumnCount() > 0) {
            tblProducts.getColumnModel().getColumn(0).setResizable(false);
            tblProducts.getColumnModel().getColumn(1).setResizable(false);
            tblProducts.getColumnModel().getColumn(2).setResizable(false);
            tblProducts.getColumnModel().getColumn(3).setResizable(false);
            tblProducts.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(70, 130, 780, 520);

        modifyPrice.setText("Price:");
        modifyPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        modifyPrice.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(modifyPrice);
        modifyPrice.setBounds(960, 490, 38, 17);

        productNameTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(productNameTF);
        productNameTF.setBounds(1030, 270, 170, 40);

        modifyProductName.setText("Product Name:");
        modifyProductName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        modifyProductName.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(modifyProductName);
        modifyProductName.setBounds(893, 280, 110, 17);

        modifyCategory.setText("Category:");
        modifyCategory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        modifyCategory.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(modifyCategory);
        modifyCategory.setBounds(930, 350, 69, 17);

        deleteButton2.setText("Delete");
        deleteButton2.setBackground(new java.awt.Color(255, 153, 102));
        deleteButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton2);
        deleteButton2.setBounds(850, 730, 120, 50);

        btnBack.setText("Back");
        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(20, 20, 70, 30);

        editButton2.setText("Edit");
        editButton2.setBackground(new java.awt.Color(102, 255, 102));
        editButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        editButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(editButton2);
        editButton2.setBounds(1160, 730, 120, 50);

        barcodeTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        barcodeTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barcodeTFKeyPressed(evt);
            }
        });
        getContentPane().add(barcodeTF);
        barcodeTF.setBounds(1030, 410, 170, 40);

        categoryComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(categoryComboBox);
        categoryComboBox.setBounds(1030, 340, 170, 40);

        apmHelpBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        apmHelpBtn.setText("Help");
        apmHelpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apmHelpBtnActionPerformed(evt);
            }
        });
        getContentPane().add(apmHelpBtn);
        apmHelpBtn.setBounds(1220, 20, 60, 30);

        apmImage.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        apmImage.setForeground(java.awt.Color.white);
        apmImage.setIcon(new javax.swing.ImageIcon("C:\\Users\\troyr\\Dropbox\\School Work\\IT\\TroyRenaudGr12PAT\\Troy_Gr_12_PAT_Images\\milad-fakurian-bexwsdM5BCw-unsplash.jpg")); // NOI18N
        getContentPane().add(apmImage);
        apmImage.setBounds(-1140, -160, 2700, 960);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Opens the AddNewProductUI when the "Add New Product" button is clicked.
     *
     * @param evt action event triggered by clicking the button
     */
    private void AddNewProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewProductBtnActionPerformed
        AdminNewProductUI anp = new AdminNewProductUI(adminUser, currentCustomer);
        anp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_AddNewProductBtnActionPerformed

    /**
     * Handles mouse click events on the product table. Fills the fields with
     * the details of the clicked product.
     *
     * @param evt mouse event triggered by clicking a table row
     */
    private void tblProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductsMouseClicked
        selected = tblProducts.getSelectedRow();
        this.tblProductsValueChanged();
    }//GEN-LAST:event_tblProductsMouseClicked

    /**
     * Handles the deletion of a product when the "Delete" button is clicked.
     * Asks for confirmation before deleting the product and then updates the
     * table.
     *
     * @param evt action event triggered by clicking the delete button
     */
    private void deleteButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButton2ActionPerformed
        if (selected != -1) {
            // Ask for confirmation before deleting the product
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this product?", "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                DataHandler dh = new DataHandler();

                // Delete the selected product from the ArrayList
                Product productToDelete = products.get(selected);
                dh.deleteProduct(productToDelete);
                products.remove(selected);

                // Delete the selected product from the table's data model
                DefaultTableModel dtm = (DefaultTableModel) tblProducts.getModel();
                dtm.removeRow(selected);

                // Clear the text fields
                productNameTF.setText("");
                categoryComboBox.setSelectedItem(null);
                barcodeTF.setText("");
                priceTF.setText("");

                selected = -1; // Reset the selected index
            }
        } else {
            JOptionPane.showMessageDialog(null, "No product selected for deletion.");
        }
    }//GEN-LAST:event_deleteButton2ActionPerformed

    /**
     * Goes back to the AdminDashboardUI when the "Back" button is clicked.
     *
     * @param evt action event triggered by clicking the back button
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        AdminDashboardUI adb = new AdminDashboardUI(adminUser, currentCustomer);
        adb.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * Performs validation on the input fields to ensure all fields are filled.
     * Displays an error message if any fields are empty.
     */
    private void checksForEdit() {
        String productName = productNameTF.getText().trim();
        String category = (String) categoryComboBox.getSelectedItem();
        String barcode = barcodeTF.getText().trim();
        String priceText = priceTF.getText().trim();
        // Extract text from different text fields and store it in separate String variables
        // .trim helps .isEmpty to work by trimming spaces and seeing if values were left out

//        if (!isValidBarcode(barcode)) {
//            JOptionPane.showMessageDialog(null, "Invalid barcode format. Please enter a valid barcode.");
//            return;
//            // Runs the isValidBarcode code and return message if false
//            //they user is able to create their own barcodes for their products therefore no need for validation
//        }
        if (productName.isEmpty() || category.isEmpty() || barcode.isEmpty() || priceText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All text fields must be entered.");
            return;
            // Check if any of the text fields are empty
            // This is an if statement to see what if the data will be returned true/false - and then follow up with a message pop-up
        }
    }

    /**
     * Updates the selected product's information when the "Edit" button is
     * clicked.
     *
     * @param evt action event triggered by clicking the edit button
     */
    private void editButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButton2ActionPerformed
        int productID = products.get(selected).getProductID();
        String productName = productNameTF.getText().trim();
        String category = (String) categoryComboBox.getSelectedItem();
        String barcode = barcodeTF.getText().trim();
        String priceText = priceTF.getText().trim();
        // This code extracts information entered or selected by the user and assigns it to different variables

        checksForEdit(); // Perform validation checks first

        // If checksForEdit shows an error, it will return early and not execute the following code
        if (productName.isEmpty() || category.isEmpty() || barcode.isEmpty() || priceText.isEmpty()) {
            return;
        }

        DataHandler dh = new DataHandler();

        // Check if the priceText is a valid number
        try {
            double price = Double.parseDouble(priceText);
            // If the price and quantity are valid numbers, update the product
            dh.updateProduct(new Product(productID, productName, category, barcode, price));
            DefaultTableModel dtm = (DefaultTableModel) tblProducts.getModel();
            dtm.setValueAt(productName, selected, 1);
            dtm.setValueAt(category, selected, 2);
            dtm.setValueAt(barcode, selected, 3);
            dtm.setValueAt(price, selected, 4);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid price or quantity format. Please enter valid numbers.");
        }
        //this code sets/updates the older values so that they are updated immediately after clicking the edit button
        //makes sure price is is the right format otherwise displays message dialog
        //Reference: https://stackoverflow.com/questions/3179136/jtable-how-to-refresh-table-model-after-insert-delete-or-update-the-data (helped with refreshing table data)
    }//GEN-LAST:event_editButton2ActionPerformed

    /**
     * Scans the barcode/QR code and fills in the product information in the
     * fields (if the barcode TextField is selected).
     *
     * The barcode/QR scanner code works but it has no real use in this project
     * This code was for future improvement when the bar is incorporated into
     * this program
     *
     * When the barcode/QR code is scanned the details of the products will be
     * entered into the text fields
     *
     * @param evt key event triggered when the enter key is pressed
     */
    private void barcodeTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeTFKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String barcode = barcodeTF.getText().trim();
            if (barcode.equals("1001")) {
                productNameTF.setText("Bacon & Egg Buns");
                priceTF.setText("R35");
                categoryComboBox.setSelectedItem("Buns & Rolls");
            } else if (barcode.equals("1002")) {
                productNameTF.setText("Boerewors Rolls");
                priceTF.setText("R30");
                categoryComboBox.setSelectedItem("Buns & Rolls");
            } else if (barcode.equals("1022")) {
                productNameTF.setText("Hot Chips");
                priceTF.setText("R25");
                categoryComboBox.setSelectedItem("Other");
            } else if (barcode.equals("1005")) {
                productNameTF.setText("Kudu Burger");
                priceTF.setText("R50");
                categoryComboBox.setSelectedItem("Burgers");
            } else if (barcode.equals("1003")) {
                productNameTF.setText("Hot Dog");
                priceTF.setText("R15");
                categoryComboBox.setSelectedItem("Buns & Rolls");
            } else if (barcode.equals("1004")) {
                productNameTF.setText("Sausage Roll");
                priceTF.setText("R30");
                categoryComboBox.setSelectedItem("Buns & Rolls");
            } else if (barcode.equals("1006")) {
                productNameTF.setText("Chicken Burger");
                priceTF.setText("R45");
                categoryComboBox.setSelectedItem("Burgers");
            } else if (barcode.equals("1007")) {
                productNameTF.setText("Beef Burger");
                priceTF.setText("R50");
                categoryComboBox.setSelectedItem("Burgers");
            } else if (barcode.equals("1008")) {
                productNameTF.setText("Marguerita Pizza");
                priceTF.setText("R95");
                categoryComboBox.setSelectedItem("Pizza");
            } else if (barcode.equals("1009")) {
                productNameTF.setText("Chicken Pizza");
                priceTF.setText("R115");
                categoryComboBox.setSelectedItem("Pizza");
            } else if (barcode.equals("1010")) {
                productNameTF.setText("Bacon Pizza");
                priceTF.setText("R115");
                categoryComboBox.setSelectedItem("Pizza");
            } else if (barcode.equals("1011")) {
                productNameTF.setText("Steak Pizza");
                priceTF.setText("R130");
                categoryComboBox.setSelectedItem("Pizza");
            } else if (barcode.equals("1012")) {
                productNameTF.setText("Lamb Pizza");
                priceTF.setText("R130");
                categoryComboBox.setSelectedItem("Pizza");
            } else if (barcode.equals("1013")) {
                productNameTF.setText("Toasted Cheese");
                priceTF.setText("R25");
                categoryComboBox.setSelectedItem("Toasted Sandwiches");
            } else if (barcode.equals("1014")) {
                productNameTF.setText("Toasted Cheese & Tomato");
                priceTF.setText("R30");
                categoryComboBox.setSelectedItem("Toasted Sandwiches");
            } else if (barcode.equals("1015")) {
                productNameTF.setText("Toasted Cheese & Ham");
                priceTF.setText("R35");
                categoryComboBox.setSelectedItem("Toasted Sandwiches");
            } else if (barcode.equals("1016")) {
                productNameTF.setText("Toasted Cheese, Ham & Tomato");
                priceTF.setText("R40");
                categoryComboBox.setSelectedItem("Toasted Sandwiches");
            } else if (barcode.equals("1017")) {
                productNameTF.setText("Toasted Chicken Mayo");
                priceTF.setText("R40");
                categoryComboBox.setSelectedItem("Toasted Sandwiches");
            } else if (barcode.equals("1018")) {
                productNameTF.setText("Crunchie");
                priceTF.setText("R10");
                categoryComboBox.setSelectedItem("Snacks");
            } else if (barcode.equals("1019")) {
                productNameTF.setText("Choc Chip Cookie");
                priceTF.setText("R10");
                categoryComboBox.setSelectedItem("Snacks");
            } else if (barcode.equals("1020")) {
                productNameTF.setText("Marshmallow Treat");
                priceTF.setText("R10");
                categoryComboBox.setSelectedItem("Snacks");
            } else if (barcode.equals("1021")) {
                productNameTF.setText("Donut");
                priceTF.setText("R15");
                categoryComboBox.setSelectedItem("Snacks");
            } else if (barcode.equals("1023")) {
                productNameTF.setText("Pie");
                priceTF.setText("R30");
                categoryComboBox.setSelectedItem("Other");
            } else if (barcode.equals("1024")) {
                productNameTF.setText("Curry & Rice");
                priceTF.setText("R60");
                categoryComboBox.setSelectedItem("Other");
            } else {
                JOptionPane.showMessageDialog(null, "Product not found for this QR Code.");
            }
        }
    }//GEN-LAST:event_barcodeTFKeyPressed

    /**
     * Displays a help message dialog to guide users on how to use the Admin
     * Product Management UI.
     *
     * @param evt action event triggered by clicking the help button
     */
    private void apmHelpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apmHelpBtnActionPerformed
        String helpMessage = "1. This interface allows admin users to manage product data.\n\n"
                + "2. The table displays the following product information:\n"
                + "   - ProductID: The unique identifier for each product.\n"
                + "   - ProductName: The name of the product.\n"
                + "   - Category: The category the product belongs to.\n"
                + "   - Barcode: The barcode of the product (used for scanning).\n"
                + "   - Price: The price of the product.\n\n"
                + "3. Adding a New Product:\n"
                + "   - Click 'Add New Product' to open the form for adding a new product.\n\n"
                + "4. Editing a Product:\n"
                + "   - Select a product row, make changes in the form, and click 'Edit' to update.\n\n"
                + "5. Deleting a Product:\n"
                + "   - Select a product and click 'Delete' to remove it from the system.\n\n"
                + "6. Navigation:\n"
                + "   - Use the 'Back' button to return to the Admin Dashboard.\n\n"
                + "If you have any further questions, please contact support.";

        JOptionPane.showMessageDialog(null, helpMessage, "Admin Product Management Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_apmHelpBtnActionPerformed

    /**
     * Finds a product by its barcode. Searches through the list of all products
     * and returns the product that matches the provided barcode.
     *
     * @param barcode the barcode of the product to find
     * @return the Product object if found, or null if no product matches the
     * barcode
     */
    private Product findProductByBarcode(String barcode) {
        DataHandler dh = new DataHandler();
        ArrayList<Product> products = dh.getAllProducts();

        for (int i = 0; i < products.size(); i++) {
            Product product = products.get(i);
            if (product.getBarcode().equals(barcode)) {
                return product;
            }
        }
        return null;
    }

//    private boolean isValidBarcode(String barcode1) {
//        return barcode1.matches("\\d{12}");
//        //they can make their own barcode so there is no need for a validation check
//    }
    /**
     * Populates the product table with data from the products list. Initializes
     * the table model and adds each product's details as a new row.
     */
    public void addTable() {
        DataHandler dh = new DataHandler();
        products = dh.getAllProducts();
        DefaultTableModel dtm = (DefaultTableModel) tblProducts.getModel();
        Object productRow[] = new Object[7];
        for (int i = 0; i < products.size(); i++) {
            productRow[0] = "" + products.get(i).getProductID();
            productRow[1] = "" + products.get(i).getProductName();
            productRow[2] = "" + products.get(i).getCategory();
            productRow[3] = "" + products.get(i).getBarcode();
            productRow[4] = "" + products.get(i).getPrice();
            dtm.addRow(productRow);
        }
        tblProducts.setSelectionMode(0);  // Set the selection to the first product.
        selected = tblProducts.getSelectedRow();  // Update the selected index.
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminProductManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminProductManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminProductManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminProductManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AdminProductManagementUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewProductBtn;
    private javax.swing.JButton apmHelpBtn;
    private javax.swing.JLabel apmImage;
    private javax.swing.JTextField barcodeTF;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JButton deleteButton2;
    private javax.swing.JButton editButton2;
    private com.github.lgooddatepicker.components.DatePicker expiryDatePicker;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel modifyBarcode;
    private javax.swing.JLabel modifyCategory;
    private javax.swing.JLabel modifyPrice;
    private javax.swing.JLabel modifyProductName;
    private javax.swing.JTextField priceTF;
    private javax.swing.JTextField productNameTF;
    private javax.swing.JTable tblProducts;
    // End of variables declaration//GEN-END:variables
}
